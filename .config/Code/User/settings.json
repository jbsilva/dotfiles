{
  // =============================
  // Language-specific settings
  // =============================
  "[csharp]": {
    "editor.defaultFormatter": "ms-dotnettools.csharp"
  },
  "[html]": {
    "editor.defaultFormatter": "mohd-akram.vscode-html-format"
  },
  "[javascript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[nix]": {
    "editor.defaultFormatter": "jnoortheen.nix-ide"
  },
  "[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff"
  },
  "[terragrunt]": {
    "editor.defaultFormatter": "jkillian.custom-local-formatters"
  },
  "[toml]": {
    "editor.defaultFormatter": "tamasfe.even-better-toml"
  },
  "[yaml]": {
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // =============================
  // Editor
  // =============================
  "editor.autoClosingBrackets": "never",
  "editor.fontFamily": "'Hack Nerd Font', 'Cascadia Code', 'FiraCode Nerd Font', Consolas",
  "editor.formatOnSave": true,
  "editor.renderWhitespace": "boundary",
  "editor.rulers": [80, 100],
  // https://github.com/VSCodeVim/Vim/issues/9680
  "editor.experimentalEditContextEnabled": false,

  // =============================
  // Diff Editor
  // =============================
  "diffEditor.ignoreTrimWhitespace": false,

  // =============================
  // Formatting
  // =============================
  "customLocalFormatters.formatters": [
    {
      "command": "terragrunt hcl format",
      "languages": ["hcl", "terragrunt"]
    }
  ],
  "prettier.printWidth": 100,
  "prettier.proseWrap": "always",

  // =============================
  // Git & GitLens
  // =============================
  "git.autofetch": true,
  "git.confirmSync": false,
  "gitlens.graph.dimMergeCommits": true,
  "gitlens.telemetry.enabled": false,

  // =============================
  // Nix
  // =============================
  "nix.enableLanguageServer": true,
  "nix.formatterPath": "nixfmt",
  "nix.serverPath": "nil",
  "nix.serverSettings": {
    "nil": {
      "formatting": {
        "command": ["nixfmt"]
      },
      "options": {
        "nix-darwin": {
          "expr": "(builtins.getFlake \"${userHome}/dotfiles/nix-darwin\").darwinConfigurations.M4.options"
        }
      }
    }
  },

  // =============================
  // Terminal
  // =============================
  // Allow using Ctrl+f and Ctrl+q in the terminal (for Vim)
  "terminal.integrated.commandsToSkipShell": [
    "-workbench.action.terminal.focusFind",
    "-workbench.action.quickOpenView"
  ],
  "terminal.integrated.defaultProfile.linux": "zsh",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.scrollback": 50000,
  "terminal.integrated.stickyScroll.enabled": true,
  "terminal.integrated.suggest.enabled": true,

  // =============================
  // Vim (VSCodeVim)
  // =============================
  "vim.camelCaseMotion.enable": true,
  "vim.easymotion": true,
  "vim.highlightedyank.enable": true,
  "vim.history": 500,
  "vim.hlsearch": true,
  "vim.leader": " ",
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      // Delete without overwriting last yank (delete to the black hole register "_)
      "after": ["\"", "_", "d"],
      "before": ["d"]
    },
    {
      // Normal delete with <leader>d (overwrite last yank)
      "after": ["d"],
      "before": ["<leader>", "d"]
    },
    {
      // Delete until end of line without overwriting last yank
      "after": ["\"", "_", "D"],
      "before": ["D"]
    },
    {
      // Normal delete with <leader>D (overwrite last yank). Same as `d$`
      "after": ["D"],
      "before": ["<leader>", "D"]
    },
    {
      // Delete without overwriting last yank
      "after": ["\"", "_", "x"],
      "before": ["x"]
    },
    {
      // Normal delete with <leader>x. Same as `dl`
      "after": ["x"],
      "before": ["<leader>", "x"]
    },
    {
      // Yank to system clipboard with <leader>y
      "after": ["\"", "+", "y"],
      "before": ["<leader>", "y"]
    },
    {
      // Paste from system clipboard with <leader>p
      "after": ["\"", "+", "p"],
      "before": ["<leader>", "p"]
    },
    {
      // Paste from system clipboard with <leader>P
      "after": ["\"", "+", "P"],
      "before": ["<leader>", "P"]
    },
    {
      // Y copy from cursor to last-non-blank-char
      "after": ["y", "g", "_"],
      "before": ["Y"]
    },
    {
      // Yank until last-non-blank-char to system clipboard with <leader>Y
      "after": ["\"", "+", "y", "g", "_"],
      "before": ["<leader>", "Y"]
    },
    {
      // Clean search highlight with ,<space>
      "before": [",", "<leader>"],
      "commands": [":nohl"]
    },
    {
      // Close editor with C-w
      "before": ["<C-w>"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    {
      // Focus on File Explorer
      "before": ["<C-n>"],
      "commands": ["workbench.files.action.focusFilesExplorer"]
    },
    {
      // Focus on Left Group
      "before": ["<C-h>"],
      "commands": ["workbench.action.focusLeftGroup"]
    },
    {
      // Focus on Right Group
      "before": ["<C-l>"],
      "commands": ["workbench.action.focusRightGroup"]
    },
    {
      // Focus on Below Group
      "before": ["<C-j>"],
      "commands": ["workbench.action.focusBelowGroup"]
    },
    {
      // Focus on Above Group
      "before": ["<C-k>"],
      "commands": ["workbench.action.focusAboveGroup"]
    },
    {
      // Use VS Code undo
      "after": [],
      "before": ["u"],
      "commands": [
        {
          "command": "undo",
          "args": []
        }
      ]
    },
    {
      // Use VS Code redo
      "after": [],
      "before": ["<C-r>"],
      "commands": [
        {
          "command": "redo",
          "args": []
        }
      ]
    }
  ],
  "vim.showMarksInGutter": true,
  "vim.smartRelativeLine": true,
  "vim.sneak": true,
  "vim.textwidth": 100,
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      // Delete without overwriting last yank (delete to the black hole register "_)
      "after": ["\"", "_", "d"],
      "before": ["d"]
    },
    {
      // Normal delete with <leader>d
      "after": ["d"],
      "before": ["<leader>", "d"]
    },
    {
      // Yank to system clipboard with <leader>y
      "after": ["\"", "+", "y"],
      "before": ["<leader>", "y"]
    },
    {
      // Paste from system clipboard with <leader>p
      "after": ["\"", "+", "p"],
      "before": ["<leader>", "p"]
    },
    {
      // Paste from system clipboard with <leader>P
      "after": ["\"", "+", "P"],
      "before": ["<leader>", "P"]
    },
    {
      // Skip last occurrence highlighted by `gb` or `ctrl+d`
      "before": ["g", "s"],
      "commands": ["editor.action.moveSelectionToNextFindMatch"]
    },
    // Repeatable visual mode indent with '>' and '>'
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    }
  ],
  "vim.visualstar": true,

  // =============================
  // Workbench
  // =============================
  "workbench.iconTheme": "material-icon-theme",
  "workbench.startupEditor": "none",

  // =============================
  // AI & Copilot
  // =============================
  "chat.agent.maxRequests": 50,
  "github.copilot.nextEditSuggestions.enabled": true,

  // =============================
  // Containers
  // =============================
  "containers.contexts.showInStatusBar": true,
  "dev.containers.dockerPath": "/opt/homebrew/bin/docker",
  "dev.containers.dockerSocketPath": "~/.config/colima/default/docker.sock",

  // =============================
  // Spell check
  // =============================
  "cSpell.language": "en,pt-BR",

  // =============================
  // Type checking
  // =============================
  "mypy-type-checker.importStrategy": "fromEnvironment",
  "mypy-type-checker.severity": {
    "error": "Hint"
  },

  // =============================
  // SonarLint
  // =============================
  "sonarlint.disableTelemetry": true,
  "sonarlint.focusOnNewCode": true,
  "sonarlint.pathToNodeExecutable": "/run/current-system/sw/bin/node",

  // =============================
  // Telemetry & privacy
  // =============================
  "dotnetAcquisitionExtension.enableTelemetry": false,
  "telemetry.feedback.enabled": false,
  "telemetry.telemetryLevel": "off"
}
